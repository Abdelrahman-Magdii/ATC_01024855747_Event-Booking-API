name: Build, Test, and Deploy Event Booking

on: [ push ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Test with Maven
        run: mvn clean verify

      - name: Package Application
        run: mvn package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          retention-days: 1

  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Login to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: "abdulrahman403828@fci.bu.edu.eg"
          justlogin: true

      - name: Create or Verify Heroku App
        run: |
          if ! heroku apps:info --app ${{ secrets.HEROKU_APP_NAME }} 2>/dev/null; then
            heroku create ${{ secrets.HEROKU_APP_NAME }}
            echo "Created new Heroku app"
          else
            echo "Heroku app already exists"
          fi

      - name: Add Heroku Postgres
        run: |
          if heroku addons:info heroku-postgresql --app ${{ secrets.HEROKU_APP_NAME }} 2>/dev/null; then
            echo "Database already exists"
          else
            echo "Creating Heroku Postgres..."
            heroku addons:create heroku-postgresql:${{ secrets.HEROKU_DB_PLAN }} --app ${{ secrets.HEROKU_APP_NAME }}
            sleep 20  # wait for Heroku to provision the DB
          fi

      - name: Check Dynos Status
        run: heroku ps --app ${{ secrets.HEROKU_APP_NAME }}

      - name: Clear Existing Config
        run: |
          echo "Clearing potentially misconfigured variables..."
          heroku config:unset SPRING_DATASOURCE_URL SPRING_DATASOURCE_USERNAME SPRING_DATASOURCE_PASSWORD --app ${{ secrets.HEROKU_APP_NAME }} || true

      - name: Convert and Set Database Config
        run: |
          # Get and convert DATABASE_URL to JDBC format
          DB_URL=$(heroku config:get DATABASE_URL --app ${{ secrets.HEROKU_APP_NAME }})
          
          HOST_AND_DB=$(echo "$DB_URL" | sed -E 's|postgres://[^@]+@([^?]+).*|\1|')
          
          JDBC_URL="jdbc:postgresql://${HOST_AND_DB}?sslmode=require"
          
          DB_USER=$(echo "$DB_URL" | awk -F 'postgres://|:|@' '{print $2}')
          DB_PASS=$(echo "$DB_URL" | awk -F 'postgres://|:|@' '{print $3}')
          
          # Set all environment variables atomically on Heroku app
          heroku config:set \
          SPRING_DATASOURCE_URL="$JDBC_URL" \
          SPRING_DATASOURCE_USERNAME="$DB_USER" \
          SPRING_DATASOURCE_PASSWORD="$DB_PASS" \
          MAIL_USERNAME="${{ secrets.MAIL_USERNAME }}" \
          MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}" \
          JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
          BASE_URL="https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com" \
          ALLOWED_ORIGINS="http://localhost:4200,https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com" \
          SPRING_PROFILES_ACTIVE="prod" \
          PORT="8080" \
          JAVA_OPTS="-XX:+UseContainerSupport -Xmx300m -Xss512k -XX:CICompilerCount=2" \
          --app ${{ secrets.HEROKU_APP_NAME }}

      - name: Create Procfile if Missing
        run: |
          if [ ! -f Procfile ]; then
            echo "Creating Procfile..."
            echo "web: java -Dserver.port=\$PORT \$JAVA_OPTS -jar target/*.jar --spring.profiles.active=prod" > Procfile
            git add Procfile || true
            git config --global user.email "abdulrahman403828@fci.bu.edu.eg"
            git config --global user.name "Abdelrahman-Magdii"
            git commit -m "Add Procfile for Heroku deployment" || true
          fi

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: "abdulrahman403828@fci.bu.edu.eg"
          procfile: "web: java -Dserver.port=$PORT $JAVA_OPTS -jar target/*.jar --spring.profiles.active=prod"

      - name: Check for Port Binding Issues
        if: always()
        run: |
          # Create a system.properties file to specify Java runtime
          echo "java.runtime.version=17" > system.properties
          git add system.properties || true
          git config --global user.email "ci@example.com" || true
          git config --global user.name "CI" || true
          git commit -m "Add system.properties to specify Java runtime" || echo "No changes to commit"
          
          # Force push system.properties
          heroku git:remote --app ${{ secrets.HEROKU_APP_NAME }}
          git push heroku HEAD:main --force || echo "Failed to push system.properties"

      - name: Check Logs After Deployment
        if: always()
        run: |
          echo "Checking application logs for startup errors..."
          heroku logs --num 100 --app ${{ secrets.HEROKU_APP_NAME }}

      - name: Configure JVM Options
        run: |
          echo "Setting appropriate JVM options for Heroku..."
          heroku config:set \
          JAVA_OPTS="-Xmx300m -Xss512k -XX:CICompilerCount=2 -Dserver.port=\$PORT -Dspring.profiles.active=prod" \
          --app ${{ secrets.HEROKU_APP_NAME }}

      - name: Ensure Spring Boot Recognizes PORT Variable
        run: |
          heroku config:set \
          SERVER_PORT="\$PORT" \
          --app ${{ secrets.HEROKU_APP_NAME }}

      - name: Check Database Configuration
        run: |
          echo "Checking database configuration..."
          heroku config --app ${{ secrets.HEROKU_APP_NAME }} | grep -i database
          heroku config --app ${{ secrets.HEROKU_APP_NAME }} | grep -i spring

      - name: Restart App With Debug Logging
        run: |
          echo "Enabling debug logging and restarting..."
          heroku config:set LOGGING_LEVEL_ROOT=DEBUG LOGGING_LEVEL_ORG_SPRINGFRAMEWORK=DEBUG --app ${{ secrets.HEROKU_APP_NAME }}
          heroku restart --app ${{ secrets.HEROKU_APP_NAME }}
          sleep 15
          heroku logs --tail --app ${{ secrets.HEROKU_APP_NAME }} &
          LOGS_PID=$!
          sleep 30
          kill $LOGS_PID || true